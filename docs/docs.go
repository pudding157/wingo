// // GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// // This file was generated by swaggo/swag

// package docs

// import (
// 	"bytes"
// 	"encoding/json"
// 	"strings"

// 	"github.com/alecthomas/template"
// 	"github.com/swaggo/swag"
// )

// var doc = `{
//     "schemes": {{ marshal .Schemes }},
//     "swagger": "2.0",
//     "info": {
//         "description": "{{.Description}}",
//         "title": "{{.Title}}",
//         "contact": {},
//         "version": "{{.Version}}"
//     },
//     "host": "{{.Host}}",
//     "basePath": "{{.BasePath}}",
//     "paths": {}
// }`

// type swaggerInfo struct {
// 	Version     string
// 	Host        string
// 	BasePath    string
// 	Schemes     []string
// 	Title       string
// 	Description string
// }

// // SwaggerInfo holds exported Swagger Info so clients can modify it
// var SwaggerInfo = swaggerInfo{
// 	Version:     "",
// 	Host:        "",
// 	BasePath:    "",
// 	Schemes:     []string{},
// 	Title:       "",
// 	Description: "",
// }

// type s struct{}

// func (s *s) ReadDoc() string {
// 	sInfo := SwaggerInfo
// 	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

// 	t, err := template.New("swagger_info").Funcs(template.FuncMap{
// 		"marshal": func(v interface{}) string {
// 			a, _ := json.Marshal(v)
// 			return string(a)
// 		},
// 	}).Parse(doc)
// 	if err != nil {
// 		return doc
// 	}

// 	var tpl bytes.Buffer
// 	if err := t.Execute(&tpl, sInfo); err != nil {
// 		return doc
// 	}

// 	return tpl.String()
// }

// func init() {
// 	swag.Register(swag.Name, &s{})
// }
// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2018-01-12 18:44:40.928256 +0800 CST m=+0.272034118

package docs

import (
	"github.com/swaggo/swag"
)

var doc = `{
    "swagger": "2.0",
    "info": {
        "description": "Test Swagger.",
        "title": "Swagger WinAPP API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8000/api",
    "basePath": "/v1",
    "paths": {
        "/bank": {
            "get": {
                "description": "get all banks",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "all banks actived",
                "operationId": "",
                "parameters": [                    
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "We need ID!!",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/web.APIError"
                        }
                    },
                    "404": {
                        "description": "Can not find ID",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/web.APIError"
                        }
                    }
                }
            }
        },
        "/testapi/get-string-by-int/{some_id}": {
            "get": {
                "description": "get string by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Add a new pet to the store",
                "operationId": "get-string-by-int",
                "parameters": [
                    {
                        "type": "int",
                        "description": "Some ID",
                        "name": "some_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Some ID",
                        "name": "some_id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/web.Pet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "We need ID!!",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/web.APIError"
                        }
                    },
                    "404": {
                        "description": "Can not find ID",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/web.APIError"
                        }
                    }
                }
            }
        },
        "/testapi/get-struct-array-by-string/{some_id}": {
            "get": {
                "description": "get struct array by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "operationId": "get-struct-array-by-string",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Some ID",
                        "name": "some_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "int",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "int",
                        "description": "Offset",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "We need ID!!",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/web.APIError"
                        }
                    },
                    "404": {
                        "description": "Can not find ID",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/web.APIError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "web.APIError": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string",
                    "format": "date-time"
                },
                "ErrorCode": {
                    "type": "integer"
                },
                "ErrorMessage": {
                    "type": "string"
                }
            }
        },
        "web.Pet": {
            "type": "object",
            "properties": {
                "Category": {
                    "type": "object"
                },
                "ID": {
                    "type": "integer"
                },
                "Name": {
                    "type": "string"
                },
                "PhotoUrls": {
                    "type": "array"
                },
                "Status": {
                    "type": "string"
                },
                "Tags": {
                    "type": "array"
                }
            }
        }
    }
}`

type s struct{}

func (s *s) ReadDoc() string {
	return doc
}
func init() {
	swag.Register(swag.Name, &s{})
}
